
Updated_servo_kode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800078  00800078  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000829  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000630  00000000  00000000  00000c89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b2  00000000  00000000  000012b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  0000166c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c6  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000257  00000000  00000000  00001b3e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001d95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 74 00 	jmp	0xe8	; 0xe8 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 bd 00 	jmp	0x17a	; 0x17a <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ee       	ldi	r30, 0xE6	; 230
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  8a:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setup_uart>:
uint8_t servo_open_pin [4] = {PINA1,PINA3 ,PINA5, PINA7};

//UART setup, setting recieve and transmit 
void setup_uart() {
	// Set baud rate
	UBRRH =  0;								//Used for calculating F_CPU/16(baud rate)-1 = 51
  92:	10 bc       	out	0x20, r1	; 32
	UBRRL =  51;							//Therefor its under 255 and we only have to use the low part not the high part.
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9
	UCSRB |= (1 << TXEN) | (1 << RXEN);
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	88 61       	ori	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
	UCSRB |= (1 << RXCIE);
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	8a b9       	out	0x0a, r24	; 10
  a4:	08 95       	ret

000000a6 <uart_transmit>:
}

//UART transmit for sending back to robot 
void uart_transmit(uint8_t data) {
	// Wait for empty transmit buffer
	while (!(UCSRA & (1 << UDRE)));
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <uart_transmit>

	// Put data into buffer, sends the data
	UDR = data;
  aa:	8c b9       	out	0x0c, r24	; 12
  ac:	08 95       	ret

000000ae <uart_transmit_16>:
}

void uart_transmit_16(uint16_t data) {
  ae:	cf 93       	push	r28
  b0:	df 93       	push	r29
  b2:	00 d0       	rcall	.+0      	; 0xb4 <uart_transmit_16+0x6>
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	// Wait for empty transmit buffer
	uint8_t MSB = data >> 8; 
	uint8_t LSB = (data<<8) >> 8;
	uint8_t data2[2] = {MSB, LSB};
  b8:	99 83       	std	Y+1, r25	; 0x01
  ba:	8a 83       	std	Y+2, r24	; 0x02
		
	for (int i= 0; i<2; i++ ){
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0b c0       	rjmp	.+22     	; 0xd8 <uart_transmit_16+0x2a>
		while (!(UCSRA & (1 << UDRE)));
  c2:	5d 9b       	sbis	0x0b, 5	; 11
  c4:	fe cf       	rjmp	.-4      	; 0xc2 <uart_transmit_16+0x14>
		UDR = data2[i];
  c6:	e1 e0       	ldi	r30, 0x01	; 1
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	ec 0f       	add	r30, r28
  cc:	fd 1f       	adc	r31, r29
  ce:	e8 0f       	add	r30, r24
  d0:	f9 1f       	adc	r31, r25
  d2:	20 81       	ld	r18, Z
  d4:	2c b9       	out	0x0c, r18	; 12
	// Wait for empty transmit buffer
	uint8_t MSB = data >> 8; 
	uint8_t LSB = (data<<8) >> 8;
	uint8_t data2[2] = {MSB, LSB};
		
	for (int i= 0; i<2; i++ ){
  d6:	01 96       	adiw	r24, 0x01	; 1
  d8:	82 30       	cpi	r24, 0x02	; 2
  da:	91 05       	cpc	r25, r1
  dc:	94 f3       	brlt	.-28     	; 0xc2 <uart_transmit_16+0x14>
		while (!(UCSRA & (1 << UDRE)));
		UDR = data2[i];
		}
}
  de:	0f 90       	pop	r0
  e0:	0f 90       	pop	r0
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <__vector_7>:
//Timer interrupt for PWN 
ISR(TIMER1_COMPA_vect){
  e8:	1f 92       	push	r1
  ea:	0f 92       	push	r0
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	0f 92       	push	r0
  f0:	11 24       	eor	r1, r1
  f2:	8f 93       	push	r24
	PORTD = 0xFF;
  f4:	8f ef       	ldi	r24, 0xFF	; 255
  f6:	82 bb       	out	0x12, r24	; 18
	PORTA = 0xFF;
  f8:	8b bb       	out	0x1b, r24	; 27
}
  fa:	8f 91       	pop	r24
  fc:	0f 90       	pop	r0
  fe:	0f be       	out	0x3f, r0	; 63
 100:	0f 90       	pop	r0
 102:	1f 90       	pop	r1
 104:	18 95       	reti

00000106 <set_timer_pwm>:

//SETUP PWM 
void set_timer_pwm(){
	DDRD = 0xFF; //Port D som output
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF; 
 10a:	8a bb       	out	0x1a, r24	; 26
	
	TCCR1A |= 1<<WGM11;   // | 1<<COM1A1 | 1<<COM1A0 | 1<<COM1B1 | 1<<COM1B0 | 1<<FOC1A | 1<<FOC1B; //configuration af TC1 "Fast PWM mode, non-inverted output on OC1A.
 10c:	8f b5       	in	r24, 0x2f	; 47
 10e:	82 60       	ori	r24, 0x02	; 2
 110:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1<<WGM12 | 1<<WGM13  | 1<<CS11; //Sets TC1 for a prescaler of 1 (no prescaling) and Fast PWM mode.
 112:	8e b5       	in	r24, 0x2e	; 46
 114:	8a 61       	ori	r24, 0x1A	; 26
 116:	8e bd       	out	0x2e, r24	; 46
	TIMSK  |= 1<<OCIE1A; //Enables the output compare interrupt for OC1A.
 118:	89 b7       	in	r24, 0x39	; 57
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	89 bf       	out	0x39, r24	; 57
	
	ICR1 = 19999; // maksimale værdi for counter fra databladet beregnes duty cycle.
 11e:	8f e1       	ldi	r24, 0x1F	; 31
 120:	9e e4       	ldi	r25, 0x4E	; 78
 122:	97 bd       	out	0x27, r25	; 39
 124:	86 bd       	out	0x26, r24	; 38

	sei(); // Enables global interrupts. som gør at kalde interrupt service routine (ISR), som sætter PORTD to 0xFF (all pins high).
 126:	78 94       	sei
	
	DDRD |= (1 << PORTD5) | (1 << PORTD4) | (1 << PORTD3) | (1 << PORTD7); // PD5,4,3,7 som output-pins.
 128:	81 b3       	in	r24, 0x11	; 17
 12a:	88 6b       	ori	r24, 0xB8	; 184
 12c:	81 bb       	out	0x11, r24	; 17
	DDRA |= (1 << PORTA1) | (1 << PORTA3) | (1 << PORTA5) | (1 << PORTA7); // PA1,2,4,6 som output-pins.
 12e:	8a b3       	in	r24, 0x1a	; 26
 130:	8a 6a       	ori	r24, 0xAA	; 170
 132:	8a bb       	out	0x1a, r24	; 26
 134:	08 95       	ret

00000136 <rot_servo>:

}

void rot_servo(uint8_t gripper_number, uint8_t rot){
	uint16_t angle;
	if (rot == 1){
 136:	61 30       	cpi	r22, 0x01	; 1
 138:	19 f4       	brne	.+6      	; 0x140 <rot_servo+0xa>
		angle = 1500;
 13a:	2c ed       	ldi	r18, 0xDC	; 220
 13c:	35 e0       	ldi	r19, 0x05	; 5
 13e:	02 c0       	rjmp	.+4      	; 0x144 <rot_servo+0xe>
	}
	else {
		angle = 1000;
 140:	28 ee       	ldi	r18, 0xE8	; 232
 142:	33 e0       	ldi	r19, 0x03	; 3
	}
	
	servo_rot[gripper_number] = angle;
 144:	e8 2f       	mov	r30, r24
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	ee 0f       	add	r30, r30
 14a:	ff 1f       	adc	r31, r31
 14c:	e0 59       	subi	r30, 0x90	; 144
 14e:	ff 4f       	sbci	r31, 0xFF	; 255
 150:	31 83       	std	Z+1, r19	; 0x01
 152:	20 83       	st	Z, r18
 154:	08 95       	ret

00000156 <open_serv>:

}

void open_serv(uint8_t gripper_number, uint8_t open){
 156:	e8 2f       	mov	r30, r24
	uint16_t angle;
	if (open == 1){
 158:	61 30       	cpi	r22, 0x01	; 1
 15a:	19 f4       	brne	.+6      	; 0x162 <open_serv+0xc>
		angle = 2150;
 15c:	86 e6       	ldi	r24, 0x66	; 102
 15e:	98 e0       	ldi	r25, 0x08	; 8
 160:	02 c0       	rjmp	.+4      	; 0x166 <open_serv+0x10>
	}
	else {
		angle = 850;
 162:	82 e5       	ldi	r24, 0x52	; 82
 164:	93 e0       	ldi	r25, 0x03	; 3
	}

servo_open[gripper_number] = angle;
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	ee 0f       	add	r30, r30
 16a:	ff 1f       	adc	r31, r31
 16c:	e8 59       	subi	r30, 0x98	; 152
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	91 83       	std	Z+1, r25	; 0x01
 172:	80 83       	st	Z, r24
uart_transmit_16(servo_open[gripper_number]); 
 174:	0e 94 57 00 	call	0xae	; 0xae <uart_transmit_16>
 178:	08 95       	ret

0000017a <__vector_13>:
}

ISR(USART_RXC_vect){			//UART Recieve interrrupt
 17a:	1f 92       	push	r1
 17c:	0f 92       	push	r0
 17e:	0f b6       	in	r0, 0x3f	; 63
 180:	0f 92       	push	r0
 182:	11 24       	eor	r1, r1
 184:	2f 93       	push	r18
 186:	3f 93       	push	r19
 188:	4f 93       	push	r20
 18a:	5f 93       	push	r21
 18c:	6f 93       	push	r22
 18e:	7f 93       	push	r23
 190:	8f 93       	push	r24
 192:	9f 93       	push	r25
 194:	af 93       	push	r26
 196:	bf 93       	push	r27
 198:	ef 93       	push	r30
 19a:	ff 93       	push	r31
	m = UDR;
 19c:	2c b1       	in	r18, 0x0c	; 12
 19e:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <m>
	if ((m & CHECK_BIT)==CHECK_BIT){
 1a2:	82 2f       	mov	r24, r18
 1a4:	81 78       	andi	r24, 0x81	; 129
 1a6:	81 38       	cpi	r24, 0x81	; 129
 1a8:	79 f5       	brne	.+94     	; 0x208 <__vector_13+0x8e>
		rot = (m & ROT_BIT) >> 4;
 1aa:	62 2f       	mov	r22, r18
 1ac:	60 71       	andi	r22, 0x10	; 16
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	75 95       	asr	r23
 1b2:	67 95       	ror	r22
 1b4:	75 95       	asr	r23
 1b6:	67 95       	ror	r22
 1b8:	75 95       	asr	r23
 1ba:	67 95       	ror	r22
 1bc:	75 95       	asr	r23
 1be:	67 95       	ror	r22
 1c0:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__data_end>
		gripper_number = (m & GRIPPER_NUMBER_BIT)>>5;
 1c4:	82 2f       	mov	r24, r18
 1c6:	80 76       	andi	r24, 0x60	; 96
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	95 95       	asr	r25
 1cc:	87 95       	ror	r24
 1ce:	95 95       	asr	r25
 1d0:	87 95       	ror	r24
 1d2:	95 95       	asr	r25
 1d4:	87 95       	ror	r24
 1d6:	95 95       	asr	r25
 1d8:	87 95       	ror	r24
 1da:	95 95       	asr	r25
 1dc:	87 95       	ror	r24
 1de:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <gripper_number>
		open = (m & OPEN_BIT) >> 3;
 1e2:	28 70       	andi	r18, 0x08	; 8
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	35 95       	asr	r19
 1e8:	27 95       	ror	r18
 1ea:	35 95       	asr	r19
 1ec:	27 95       	ror	r18
 1ee:	35 95       	asr	r19
 1f0:	27 95       	ror	r18
 1f2:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <open>
		rot_servo(gripper_number, rot);
 1f6:	0e 94 9b 00 	call	0x136	; 0x136 <rot_servo>
		open_serv(gripper_number, open);
 1fa:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <open>
 1fe:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gripper_number>
 202:	0e 94 ab 00 	call	0x156	; 0x156 <open_serv>
 206:	05 c0       	rjmp	.+10     	; 0x212 <__vector_13+0x98>
	}
	else {
		error = 1;
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <error>
		uart_transmit(error);
 20e:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
	}
}
 212:	ff 91       	pop	r31
 214:	ef 91       	pop	r30
 216:	bf 91       	pop	r27
 218:	af 91       	pop	r26
 21a:	9f 91       	pop	r25
 21c:	8f 91       	pop	r24
 21e:	7f 91       	pop	r23
 220:	6f 91       	pop	r22
 222:	5f 91       	pop	r21
 224:	4f 91       	pop	r20
 226:	3f 91       	pop	r19
 228:	2f 91       	pop	r18
 22a:	0f 90       	pop	r0
 22c:	0f be       	out	0x3f, r0	; 63
 22e:	0f 90       	pop	r0
 230:	1f 90       	pop	r1
 232:	18 95       	reti

00000234 <main>:


int main(void) {
	
	set_timer_pwm(); 
 234:	0e 94 83 00 	call	0x106	; 0x106 <set_timer_pwm>
	setup_uart();
 238:	0e 94 49 00 	call	0x92	; 0x92 <setup_uart>


	while(1){
	
		for (int i=0; i < 5; i++) {
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	4b c0       	rjmp	.+150    	; 0x2d8 <main+0xa4>
			if (TCNT1 >= servo_rot[i] && bit_is_set(PORTD , servo_rot_pin[i])) PORTD &= ~(1 << servo_rot_pin[i]);
 242:	4c b5       	in	r20, 0x2c	; 44
 244:	5d b5       	in	r21, 0x2d	; 45
 246:	fc 01       	movw	r30, r24
 248:	ee 0f       	add	r30, r30
 24a:	ff 1f       	adc	r31, r31
 24c:	e0 59       	subi	r30, 0x90	; 144
 24e:	ff 4f       	sbci	r31, 0xFF	; 255
 250:	20 81       	ld	r18, Z
 252:	31 81       	ldd	r19, Z+1	; 0x01
 254:	42 17       	cp	r20, r18
 256:	53 07       	cpc	r21, r19
 258:	c8 f0       	brcs	.+50     	; 0x28c <main+0x58>
 25a:	22 b3       	in	r18, 0x12	; 18
 25c:	fc 01       	movw	r30, r24
 25e:	ec 59       	subi	r30, 0x9C	; 156
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	40 81       	ld	r20, Z
 264:	30 e0       	ldi	r19, 0x00	; 0
 266:	04 2e       	mov	r0, r20
 268:	02 c0       	rjmp	.+4      	; 0x26e <main+0x3a>
 26a:	35 95       	asr	r19
 26c:	27 95       	ror	r18
 26e:	0a 94       	dec	r0
 270:	e2 f7       	brpl	.-8      	; 0x26a <main+0x36>
 272:	20 ff       	sbrs	r18, 0
 274:	0b c0       	rjmp	.+22     	; 0x28c <main+0x58>
 276:	52 b3       	in	r21, 0x12	; 18
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	02 c0       	rjmp	.+4      	; 0x282 <main+0x4e>
 27e:	22 0f       	add	r18, r18
 280:	33 1f       	adc	r19, r19
 282:	4a 95       	dec	r20
 284:	e2 f7       	brpl	.-8      	; 0x27e <main+0x4a>
 286:	20 95       	com	r18
 288:	25 23       	and	r18, r21
 28a:	22 bb       	out	0x12, r18	; 18
			//else PORTD &= ~(1 << servo_rot_pin[i]);
			if (TCNT1 > servo_open[i]&& bit_is_set(PORTA , servo_open_pin[i])) PORTA &= ~(1 << servo_open_pin[i]);
 28c:	4c b5       	in	r20, 0x2c	; 44
 28e:	5d b5       	in	r21, 0x2d	; 45
 290:	fc 01       	movw	r30, r24
 292:	ee 0f       	add	r30, r30
 294:	ff 1f       	adc	r31, r31
 296:	e8 59       	subi	r30, 0x98	; 152
 298:	ff 4f       	sbci	r31, 0xFF	; 255
 29a:	20 81       	ld	r18, Z
 29c:	31 81       	ldd	r19, Z+1	; 0x01
 29e:	24 17       	cp	r18, r20
 2a0:	35 07       	cpc	r19, r21
 2a2:	c8 f4       	brcc	.+50     	; 0x2d6 <main+0xa2>
 2a4:	2b b3       	in	r18, 0x1b	; 27
 2a6:	fc 01       	movw	r30, r24
 2a8:	e0 5a       	subi	r30, 0xA0	; 160
 2aa:	ff 4f       	sbci	r31, 0xFF	; 255
 2ac:	40 81       	ld	r20, Z
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	04 2e       	mov	r0, r20
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <main+0x84>
 2b4:	35 95       	asr	r19
 2b6:	27 95       	ror	r18
 2b8:	0a 94       	dec	r0
 2ba:	e2 f7       	brpl	.-8      	; 0x2b4 <main+0x80>
 2bc:	20 ff       	sbrs	r18, 0
 2be:	0b c0       	rjmp	.+22     	; 0x2d6 <main+0xa2>
 2c0:	5b b3       	in	r21, 0x1b	; 27
 2c2:	21 e0       	ldi	r18, 0x01	; 1
 2c4:	30 e0       	ldi	r19, 0x00	; 0
 2c6:	02 c0       	rjmp	.+4      	; 0x2cc <main+0x98>
 2c8:	22 0f       	add	r18, r18
 2ca:	33 1f       	adc	r19, r19
 2cc:	4a 95       	dec	r20
 2ce:	e2 f7       	brpl	.-8      	; 0x2c8 <main+0x94>
 2d0:	20 95       	com	r18
 2d2:	25 23       	and	r18, r21
 2d4:	2b bb       	out	0x1b, r18	; 27
	setup_uart();


	while(1){
	
		for (int i=0; i < 5; i++) {
 2d6:	01 96       	adiw	r24, 0x01	; 1
 2d8:	85 30       	cpi	r24, 0x05	; 5
 2da:	91 05       	cpc	r25, r1
 2dc:	0c f4       	brge	.+2      	; 0x2e0 <main+0xac>
 2de:	b1 cf       	rjmp	.-158    	; 0x242 <main+0xe>
 2e0:	ad cf       	rjmp	.-166    	; 0x23c <main+0x8>

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
