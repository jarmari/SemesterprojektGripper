
Updated_servo_kode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000002c0  00000354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800078  00800078  0000036c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000081f  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000621  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003be  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000010c  00000000  00000000  00001638  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003e1  00000000  00000000  00001744  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001dc  00000000  00000000  00001b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001d01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 37       	cpi	r26, 0x7D	; 125
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <main>
  8a:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setup_uart>:
		
	for (int i= 0; i<2; i++ ){
		while (!(UCSRA & (1 << UDRE)));
		UDR = data2[i];
		}
}
  92:	10 bc       	out	0x20, r1	; 32
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9
  98:	8a b1       	in	r24, 0x0a	; 10
  9a:	88 61       	ori	r24, 0x18	; 24
  9c:	8a b9       	out	0x0a, r24	; 10
  9e:	8a b1       	in	r24, 0x0a	; 10
  a0:	80 68       	ori	r24, 0x80	; 128
  a2:	8a b9       	out	0x0a, r24	; 10
  a4:	08 95       	ret

000000a6 <uart_transmit>:
  a6:	5d 9b       	sbis	0x0b, 5	; 11
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <uart_transmit>
  aa:	8c b9       	out	0x0c, r24	; 12
  ac:	08 95       	ret

000000ae <__vector_7>:

//Timer interrupt for PWN 
ISR(TIMER1_COMPA_vect){
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	PORTD = 0xFF;
  ba:	8f ef       	ldi	r24, 0xFF	; 255
  bc:	82 bb       	out	0x12, r24	; 18
	PORTA = 0xFF;
  be:	8b bb       	out	0x1b, r24	; 27
}
  c0:	8f 91       	pop	r24
  c2:	0f 90       	pop	r0
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	0f 90       	pop	r0
  c8:	1f 90       	pop	r1
  ca:	18 95       	reti

000000cc <set_timer_pwm>:

//SETUP PWM 
void set_timer_pwm(){
	DDRD = 0xFF; //Port D som output
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	81 bb       	out	0x11, r24	; 17
	DDRA = 0xFF; 
  d0:	8a bb       	out	0x1a, r24	; 26
	
	TCCR1A |= 1<<WGM11;   // | 1<<COM1A1 | 1<<COM1A0 | 1<<COM1B1 | 1<<COM1B0 | 1<<FOC1A | 1<<FOC1B; //configuration af TC1 "Fast PWM mode, non-inverted output on OC1A.
  d2:	8f b5       	in	r24, 0x2f	; 47
  d4:	82 60       	ori	r24, 0x02	; 2
  d6:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= 1<<WGM12 | 1<<WGM13  | 1<<CS11; //Sets TC1 for a prescaler of 8 (no prescaling) and Fast PWM mode.
  d8:	8e b5       	in	r24, 0x2e	; 46
  da:	8a 61       	ori	r24, 0x1A	; 26
  dc:	8e bd       	out	0x2e, r24	; 46
	TIMSK  |= 1<<OCIE1A; //Enables the output compare interrupt for OC1A.
  de:	89 b7       	in	r24, 0x39	; 57
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	89 bf       	out	0x39, r24	; 57
	
	ICR1 = 19999; // maksimale værdi for counter fra databladet beregnes duty cycle.
  e4:	8f e1       	ldi	r24, 0x1F	; 31
  e6:	9e e4       	ldi	r25, 0x4E	; 78
  e8:	97 bd       	out	0x27, r25	; 39
  ea:	86 bd       	out	0x26, r24	; 38

	sei(); // Enables global interrupts. som gør at kalde interrupt service routine (ISR), som sætter PORTD to 0xFF (all pins high).
  ec:	78 94       	sei
	
	DDRD |= (1 << PORTD5) | (1 << PORTD4) | (1 << PORTD3) | (1 << PORTD7); // PD5,4,3,7 som output-pins.
  ee:	81 b3       	in	r24, 0x11	; 17
  f0:	88 6b       	ori	r24, 0xB8	; 184
  f2:	81 bb       	out	0x11, r24	; 17
	DDRA |= (1 << PORTA1) | (1 << PORTA3) | (1 << PORTA5) | (1 << PORTA7); // PA1,2,4,6 som output-pins.
  f4:	8a b3       	in	r24, 0x1a	; 26
  f6:	8a 6a       	ori	r24, 0xAA	; 170
  f8:	8a bb       	out	0x1a, r24	; 26
  fa:	08 95       	ret

000000fc <rot_servo>:

}

void rot_servo(uint8_t gripper_number, uint8_t rot){
	uint16_t angle;
	if (rot == 1){
  fc:	61 30       	cpi	r22, 0x01	; 1
  fe:	19 f4       	brne	.+6      	; 0x106 <rot_servo+0xa>
		angle = 2300;
 100:	2c ef       	ldi	r18, 0xFC	; 252
 102:	38 e0       	ldi	r19, 0x08	; 8
 104:	02 c0       	rjmp	.+4      	; 0x10a <rot_servo+0xe>
	}
	else {
		angle = 1000;
 106:	28 ee       	ldi	r18, 0xE8	; 232
 108:	33 e0       	ldi	r19, 0x03	; 3
	}
	
	gripper_rot[gripper_number] = angle;
 10a:	e8 2f       	mov	r30, r24
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	ee 0f       	add	r30, r30
 110:	ff 1f       	adc	r31, r31
 112:	e0 59       	subi	r30, 0x90	; 144
 114:	ff 4f       	sbci	r31, 0xFF	; 255
 116:	31 83       	std	Z+1, r19	; 0x01
 118:	20 83       	st	Z, r18
 11a:	08 95       	ret

0000011c <open_serv>:
	
}

void open_serv(uint8_t gripper_number, uint8_t open){
	uint16_t angle;
	if (open == 1){
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	19 f4       	brne	.+6      	; 0x126 <open_serv+0xa>
		angle = 2000;		//2650 var en stabil 
 120:	20 ed       	ldi	r18, 0xD0	; 208
 122:	37 e0       	ldi	r19, 0x07	; 7
 124:	02 c0       	rjmp	.+4      	; 0x12a <open_serv+0xe>
	}
	else {
		angle = 600;
 126:	28 e5       	ldi	r18, 0x58	; 88
 128:	32 e0       	ldi	r19, 0x02	; 2
	}

gripper_open[gripper_number] = angle;
 12a:	e8 2f       	mov	r30, r24
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ee 0f       	add	r30, r30
 130:	ff 1f       	adc	r31, r31
 132:	e8 59       	subi	r30, 0x98	; 152
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	31 83       	std	Z+1, r19	; 0x01
 138:	20 83       	st	Z, r18
 13a:	08 95       	ret

0000013c <__vector_13>:
//uart_transmit_16(servo_open[gripper_number]); 
}

ISR(USART_RXC_vect){			//UART Receive interrupt
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	2f 93       	push	r18
 148:	3f 93       	push	r19
 14a:	4f 93       	push	r20
 14c:	5f 93       	push	r21
 14e:	6f 93       	push	r22
 150:	7f 93       	push	r23
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	m = UDR;
 15e:	2c b1       	in	r18, 0x0c	; 12
 160:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <m>
	if ((m & CHECK_BIT)==CHECK_BIT){
 164:	82 2f       	mov	r24, r18
 166:	81 78       	andi	r24, 0x81	; 129
 168:	81 38       	cpi	r24, 0x81	; 129
 16a:	79 f5       	brne	.+94     	; 0x1ca <__vector_13+0x8e>
		rot = (m & ROT_BIT) >> 4;
 16c:	62 2f       	mov	r22, r18
 16e:	60 71       	andi	r22, 0x10	; 16
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	75 95       	asr	r23
 174:	67 95       	ror	r22
 176:	75 95       	asr	r23
 178:	67 95       	ror	r22
 17a:	75 95       	asr	r23
 17c:	67 95       	ror	r22
 17e:	75 95       	asr	r23
 180:	67 95       	ror	r22
 182:	60 93 78 00 	sts	0x0078, r22	; 0x800078 <__data_end>
		gripper_number = (m & GRIPPER_NUMBER_BIT)>>5;
 186:	82 2f       	mov	r24, r18
 188:	80 76       	andi	r24, 0x60	; 96
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	95 95       	asr	r25
 18e:	87 95       	ror	r24
 190:	95 95       	asr	r25
 192:	87 95       	ror	r24
 194:	95 95       	asr	r25
 196:	87 95       	ror	r24
 198:	95 95       	asr	r25
 19a:	87 95       	ror	r24
 19c:	95 95       	asr	r25
 19e:	87 95       	ror	r24
 1a0:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <gripper_number>
		open = (m & OPEN_BIT) >> 3;
 1a4:	28 70       	andi	r18, 0x08	; 8
 1a6:	30 e0       	ldi	r19, 0x00	; 0
 1a8:	35 95       	asr	r19
 1aa:	27 95       	ror	r18
 1ac:	35 95       	asr	r19
 1ae:	27 95       	ror	r18
 1b0:	35 95       	asr	r19
 1b2:	27 95       	ror	r18
 1b4:	20 93 7c 00 	sts	0x007C, r18	; 0x80007c <open>
		rot_servo(gripper_number, rot);
 1b8:	0e 94 7e 00 	call	0xfc	; 0xfc <rot_servo>
		open_serv(gripper_number, open);
 1bc:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <open>
 1c0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gripper_number>
 1c4:	0e 94 8e 00 	call	0x11c	; 0x11c <open_serv>
 1c8:	05 c0       	rjmp	.+10     	; 0x1d4 <__vector_13+0x98>
	}
	else {
		error = 1;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <error>
		uart_transmit(error);
 1d0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_transmit>
	}
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <main>:


int main(void) {
	
	set_timer_pwm(); 
 1f6:	0e 94 66 00 	call	0xcc	; 0xcc <set_timer_pwm>
	setup_uart();
 1fa:	0e 94 49 00 	call	0x92	; 0x92 <setup_uart>


	while(1){
		for (int i=0; i < 4; i++) {
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	57 c0       	rjmp	.+174    	; 0x2b2 <main+0xbc>
			if (TCNT1 >= 500 && TCNT1 <= 2500){
 204:	2c b5       	in	r18, 0x2c	; 44
 206:	3d b5       	in	r19, 0x2d	; 45
 208:	24 3f       	cpi	r18, 0xF4	; 244
 20a:	31 40       	sbci	r19, 0x01	; 1
 20c:	08 f4       	brcc	.+2      	; 0x210 <main+0x1a>
 20e:	50 c0       	rjmp	.+160    	; 0x2b0 <main+0xba>
 210:	2c b5       	in	r18, 0x2c	; 44
 212:	3d b5       	in	r19, 0x2d	; 45
 214:	25 3c       	cpi	r18, 0xC5	; 197
 216:	39 40       	sbci	r19, 0x09	; 9
 218:	08 f0       	brcs	.+2      	; 0x21c <main+0x26>
 21a:	4a c0       	rjmp	.+148    	; 0x2b0 <main+0xba>
				if (TCNT1 >= gripper_rot[i] && bit_is_set(PORTD , servo_rot_pin[i])) PORTD &= ~(1 << servo_rot_pin[i]);
 21c:	4c b5       	in	r20, 0x2c	; 44
 21e:	5d b5       	in	r21, 0x2d	; 45
 220:	fc 01       	movw	r30, r24
 222:	ee 0f       	add	r30, r30
 224:	ff 1f       	adc	r31, r31
 226:	e0 59       	subi	r30, 0x90	; 144
 228:	ff 4f       	sbci	r31, 0xFF	; 255
 22a:	20 81       	ld	r18, Z
 22c:	31 81       	ldd	r19, Z+1	; 0x01
 22e:	42 17       	cp	r20, r18
 230:	53 07       	cpc	r21, r19
 232:	c8 f0       	brcs	.+50     	; 0x266 <main+0x70>
 234:	22 b3       	in	r18, 0x12	; 18
 236:	fc 01       	movw	r30, r24
 238:	ec 59       	subi	r30, 0x9C	; 156
 23a:	ff 4f       	sbci	r31, 0xFF	; 255
 23c:	40 81       	ld	r20, Z
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	04 2e       	mov	r0, r20
 242:	02 c0       	rjmp	.+4      	; 0x248 <main+0x52>
 244:	35 95       	asr	r19
 246:	27 95       	ror	r18
 248:	0a 94       	dec	r0
 24a:	e2 f7       	brpl	.-8      	; 0x244 <main+0x4e>
 24c:	20 ff       	sbrs	r18, 0
 24e:	0b c0       	rjmp	.+22     	; 0x266 <main+0x70>
 250:	52 b3       	in	r21, 0x12	; 18
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	02 c0       	rjmp	.+4      	; 0x25c <main+0x66>
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	4a 95       	dec	r20
 25e:	e2 f7       	brpl	.-8      	; 0x258 <main+0x62>
 260:	20 95       	com	r18
 262:	25 23       	and	r18, r21
 264:	22 bb       	out	0x12, r18	; 18
				
				if (TCNT1 > gripper_open[i]&& bit_is_set(PORTA , servo_open_pin[i])) PORTA &= ~(1 << servo_open_pin[i]);
 266:	4c b5       	in	r20, 0x2c	; 44
 268:	5d b5       	in	r21, 0x2d	; 45
 26a:	fc 01       	movw	r30, r24
 26c:	ee 0f       	add	r30, r30
 26e:	ff 1f       	adc	r31, r31
 270:	e8 59       	subi	r30, 0x98	; 152
 272:	ff 4f       	sbci	r31, 0xFF	; 255
 274:	20 81       	ld	r18, Z
 276:	31 81       	ldd	r19, Z+1	; 0x01
 278:	24 17       	cp	r18, r20
 27a:	35 07       	cpc	r19, r21
 27c:	c8 f4       	brcc	.+50     	; 0x2b0 <main+0xba>
 27e:	2b b3       	in	r18, 0x1b	; 27
 280:	fc 01       	movw	r30, r24
 282:	e0 5a       	subi	r30, 0xA0	; 160
 284:	ff 4f       	sbci	r31, 0xFF	; 255
 286:	40 81       	ld	r20, Z
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	04 2e       	mov	r0, r20
 28c:	02 c0       	rjmp	.+4      	; 0x292 <main+0x9c>
 28e:	35 95       	asr	r19
 290:	27 95       	ror	r18
 292:	0a 94       	dec	r0
 294:	e2 f7       	brpl	.-8      	; 0x28e <main+0x98>
 296:	20 ff       	sbrs	r18, 0
 298:	0b c0       	rjmp	.+22     	; 0x2b0 <main+0xba>
 29a:	5b b3       	in	r21, 0x1b	; 27
 29c:	21 e0       	ldi	r18, 0x01	; 1
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <main+0xb0>
 2a2:	22 0f       	add	r18, r18
 2a4:	33 1f       	adc	r19, r19
 2a6:	4a 95       	dec	r20
 2a8:	e2 f7       	brpl	.-8      	; 0x2a2 <main+0xac>
 2aa:	20 95       	com	r18
 2ac:	25 23       	and	r18, r21
 2ae:	2b bb       	out	0x1b, r18	; 27
	set_timer_pwm(); 
	setup_uart();


	while(1){
		for (int i=0; i < 4; i++) {
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	84 30       	cpi	r24, 0x04	; 4
 2b4:	91 05       	cpc	r25, r1
 2b6:	0c f4       	brge	.+2      	; 0x2ba <main+0xc4>
 2b8:	a5 cf       	rjmp	.-182    	; 0x204 <main+0xe>
 2ba:	a1 cf       	rjmp	.-190    	; 0x1fe <main+0x8>

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>
